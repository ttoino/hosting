events {
    worker_connections 1024;
}

http {
    # Logging
    access_log /var/log/nginx/default_access.log;
    error_log /var/log/nginx/default_error.log;

    # SSL
    ssl_certificate /etc/nginx/cert.crt;
    ssl_certificate_key /etc/nginx/cert.key;
    ssl_protocols TLSv1.3;

    server {
        listen 80 default_server;
        server_name .toino.pt .toino.local;

        return 308 https://$host$request_uri;
    }

    server {
        listen 443 default_server ssl;
        server_name .toino.pt .toino.local;

        access_log /var/log/nginx/website_access.log;
        error_log /var/log/nginx/website_error.log;

        include mime.types;

        root /var/www/website;
        index index.php index.html index.htm;

        error_page 400 401 403 404 405 418 422 500 /error.html;

        location / {
            try_files $uri $uri/ =404;
        }
    }

    server {
        listen 443 ssl;
        server_name latex.toino.pt latex.toino.local;

        access_log /var/log/nginx/latex_access.log;
        error_log /var/log/nginx/latex_error.log;

        include mime.types;

        root /var/www/latex-previewer;
        index index.php index.html index.htm;

        location / {
            try_files $uri $uri/ =404;
        }
    }

    server {
        listen 443 ssl;
        server_name xaufome.toino.pt xaufome.toino.local;

        access_log /var/log/nginx/xaufome_access.log;
        error_log /var/log/nginx/xaufome_error.log;

        include mime.types;

        root /var/www/xaufome;
        index index.php index.html index.htm;

        error_page 400 401 403 404 405 418 422 500 /error.php;

        location / {
            try_files $uri $uri/ =404;
        }

        location ~ \.php$ {
            if (!-f $document_root$fastcgi_script_name) {
                return 404;
            }

            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            include fastcgi_params;
            fastcgi_pass xaufome:9000;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME /var/www/html$fastcgi_script_name;
        }
    }

    server {
        listen 443 ssl;
        server_name atrellado.toino.pt atrellado.toino.local;

        access_log /var/log/nginx/atrellado_access.log;
        error_log /var/log/nginx/atrellado_error.log;

        location / {
            proxy_pass http://atrellado/;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    server {
        listen 443 ssl;
        server_name commits.toino.pt commits.toino.local;

        access_log /var/log/nginx/commits_access.log;
        error_log /var/log/nginx/commits_error.log;
        
        location / {
            proxy_pass http://commits/;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    server {
        listen 443 ssl;
        server_name webhook.toino.pt webhook.toino.local;

        access_log /var/log/nginx/webhook_access.log;
        error_log /var/log/nginx/webhook_error.log;

        location / {
            proxy_pass http://webhook:9000/;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # Upgrade WebSocket if requested, otherwise use keepalive
    map $http_upgrade $connection_upgrade_keepalive {
        default upgrade;
        ''      '';
    }

    server {
        listen 443 ssl http2;
        server_name sso.toino.pt sso.toino.local
            pga.toino.pt pga.toino.local
            radarr.toino.pt radarr.toino.local
            sonarr.toino.pt sonarr.toino.local
            bazarr.toino.pt bazarr.toino.local
            readarr.toino.pt readarr.toino.local
            prowlarr.toino.pt prowlarr.toino.local
            qbt.toino.pt qbt.toino.local;

        access_log /var/log/nginx/my_access.log;
        error_log /var/log/nginx/my_error.log;

        proxy_http_version 1.1;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade_keepalive;

        location / {
            proxy_pass https://authentik-server:9443;
        }
    }

    server {
        listen 443 ssl;
        server_name jellyfin.toino.pt jellyfin.toino.local;

        access_log /var/log/nginx/jellyfin_access.log;
        error_log /var/log/nginx/jellyfin_error.log;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;

        location = / {
            return 308 https://$host/web/;
        }

        location / {
            proxy_pass http://jellyfin:8096;
            proxy_buffering off;
        }

        location = /web/ {
            proxy_pass http://jellyfin:8096/web/index.html;
        }

        location /socket {
            proxy_pass http://jellyfin:8096;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }

    ## Set a variable to help us decide if we need to add the
    ## 'Docker-Distribution-Api-Version' header.
    ## The registry always sets this header.
    ## In the case of nginx performing auth, the header is unset
    ## since nginx is auth-ing before proxying.
    map $upstream_http_docker_distribution_api_version $docker_distribution_api_version {
        '' 'registry/2.0';
    }

    server {
        listen 443 ssl;
        server_name registry.toino.pt registry.toino.local;

        access_log /var/log/nginx/registry_access.log;
        error_log /var/log/nginx/registry_error.log;

        # disable any limits to avoid HTTP 413 for large image uploads
        client_max_body_size 0;

        # required to avoid HTTP 411: see Issue #1486 (https://github.com/moby/moby/issues/1486)
        chunked_transfer_encoding on;

        location /v2/ {
            # Do not allow connections from docker 1.5 and earlier
            # docker pre-1.6.0 did not properly set the user agent on ping, catch "Go *" user agents
            if ($http_user_agent ~ "^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*$" ) {
                return 404;
            }

            # To add basic authentication to v2 use auth_basic setting.
            auth_basic "Registry realm";
            auth_basic_user_file /etc/nginx/auth.htpasswd;

            ## If $docker_distribution_api_version is empty, the header is not added.
            ## See the map directive above where this variable is defined.
            add_header 'Docker-Distribution-Api-Version' $docker_distribution_api_version always;

            proxy_pass                          http://registry:5000;
            proxy_set_header  Host              $http_host;   # required for docker client's sake
            proxy_set_header  X-Real-IP         $remote_addr; # pass on real client's IP
            proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header  X-Forwarded-Proto $scheme;
            proxy_read_timeout                  900;
        }
    }
}
