version: '3'

networks:
  vpcbr:
    driver: bridge
    ipam:
      config:
        - subnet: 10.5.0.0/16
          gateway: 10.5.0.1

x-default-service: &default-service
  logging:
    driver: loki
    options:
      loki-url: http://10.5.0.2:3100/loki/api/v1/push
      loki-retries: 2
      loki-max-backoff: 800ms
      loki-timeout: 1s
      keep-file: 'true'
  depends_on:
    - loki

services:
  registry:
    <<: *default-service
    image: registry:2
    ports:
      - "5000:5000"
    volumes:
      - ./data/registry:/var/lib/registry
    configs:
      - source: registry
        target: /etc/docker/registry/config.yml
    depends_on:
      - webhook
      - loki

  webhook:
    <<: *default-service
    image: thecatlady/webhook
    command: -debug -verbose -hooks /config/hooks.yml -hotreload -template
    env_file:
      - ./secrets/webhook.env
    expose:
      - "9000:9000"
    volumes:
      - ./webhook.fifo:/webhook.fifo
      - ./webhook.sh:/webhook.sh
    configs:
      - source: webhook
        target: /config/hooks.yml

  nginx:
    <<: *default-service
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    expose:
      - "8080:8080"
    volumes:
      - ./secrets/cert.crt:/etc/nginx/cert.crt:ro
      - ./secrets/cert.key:/etc/nginx/cert.key:ro
      - ./secrets/auth.htpasswd:/etc/nginx/auth.htpasswd:ro
      - ./logs/nginx:/var/log/nginx
      - website:/var/www/website:ro
      - latex-previewer:/var/www/latex-previewer:ro
      - schema:/var/www/schema:ro
      - xaufome:/var/www/xaufome:ro
      - commits:/var/www/commits:ro
      - sgi:/var/www/sgi:ro
    configs:
      - source: nginx
        target: /etc/nginx/nginx.conf
    depends_on:
      - registry
      - webhook
      # Subdomains
      - website
      - latex-previewer
      - schema
      - xaufome
      - atrellado
      - commits
      - luis
      - sdle
      - sdle-server
      - sgi
      - ementas
      # Admin stuff
      - authentik-server
      - authentik-worker
      - authentik-ldap
      - pgadmin
      - prometheus
      - grafana
      - cadvisor
      - node-exporter
      - loki

  # Subdomains

  website:
    <<: *default-service
    image: localhost:5000/website:latest
    volumes:
      - website:/app:rw

  latex-previewer:
    <<: *default-service
    image: localhost:5000/latex-previewer:latest
    volumes:
      - latex-previewer:/app:rw

  schema:
    <<: *default-service
    image: localhost:5000/schema:latest
    volumes:
      - schema:/app:rw

  xaufome:
    <<: *default-service
    image: localhost:5000/xaufome:latest
    volumes:
      - xaufome:/var/www/html
      - ./data/xaufome.db:/var/www/html/database/main.db
    expose:
      - "9000:9000"

  atrellado:
    <<: *default-service
    image: localhost:5000/atrellado:latest
    environment:
      DB_CONNECTION: pgsql
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: atrellado
      DB_USERNAME: atrellado

      MAIL_MAILER: smtp
      MAIL_HOST: smtp
      MAIL_PORT: 25
    env_file:
      - ./secrets/atrellado.env
    expose:
      - "80:80"
    depends_on:
      - postgres
      - smtp
      - loki

  commits:
    <<: *default-service
    image: localhost:5000/commits:latest
    volumes:
      - commits:/app:rw

  luis:
    <<: *default-service
    image: localhost:5000/luis:latest
    environment:
      SOLR_URL: http://solr:8983/solr
      SOLR_CORE: luis
    depends_on:
      - solr

  sdle:
    <<: *default-service
    image: localhost:5000/sdle:latest
    expose:
      - "3000:3000"
  
  sdle-server:
    <<: *default-service
    image: localhost:5000/sdle-server:latest
    environment:
      CLUSTER_STORAGE_DRIVER_TYPE: file_system
    volumes:
      - ./data/sdle-server:/app/data:rw
    expose:
      - "8080:8080"

  sgi:
    <<: *default-service
    image: localhost:5000/sgi:latest
    volumes:
      - sgi:/app:rw

  ementas:
    <<: *default-service
    image: localhost:5000/ementas:latest
    environment:
      DATABASE_URL: mongodb://mongo:27017/ementas?directConnection=true&retryWrites=true&w=majority&replicaSet=rs0
    expose:
      - "3000:3000"
    depends_on:
      - mongo

  # Admin stuff

  authentik-server:
    <<: *default-service
    image: ghcr.io/goauthentik/server:latest
    command: server
    env_file:
      - ./secrets/authentik.env
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgres
      AUTHENTIK_POSTGRESQL__USER: authentik
      AUTHENTIK_POSTGRESQL__NAME: authentik
    expose:
      - "9000:9000"
      - "9300:9300"
      - "9443:9443"
    volumes:
      - ./data/authentik/media:/media
      - ./data/authentik/templates:/templates
    depends_on:
      - postgres
      - redis
      - loki

  authentik-worker:
    <<: *default-service
    image: ghcr.io/goauthentik/server:latest
    command: worker
    env_file:
      - ./secrets/authentik.env
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgres
      AUTHENTIK_POSTGRESQL__USER: authentik
      AUTHENTIK_POSTGRESQL__NAME: authentik
    volumes:
      - ./data/authentik/media:/media
      - ./data/authentik/templates:/templates
      - ./data/authentik/certs:/certs
    depends_on:
      - postgres
      - redis
      - loki

  authentik-ldap:
    <<: *default-service
    image: ghcr.io/goauthentik/ldap:latest
    env_file:
      - ./secrets/authentik-ldap.env
    environment:
      AUTHENTIK_HOST: https://authentik-server:9443
      AUTHENTIK_INSECURE: "true"
    expose:
      - "3389:3389"
      - "6636:6636"
      - "9300:9300"
  
  pgadmin:
    <<: *default-service
    image: dpage/pgadmin4:latest
    restart: unless-stopped
    env_file:
      - ./secrets/pgadmin.env
    environment:
      PGADMIN_CONFIG_AUTHENTICATION_SOURCES: "['oauth2']"
      PGADMIN_CONFIG_OAUTH2_AUTO_CREATE_USERS: "True"
      PGADMIN_CONFIG_OAUTH2_CONFIG: |
        [{
          'OAUTH2_NAME': 'authentik',
          'OAUTH2_DISPLAY_NAME' : 'Authentik',
          'OAUTH2_CLIENT_ID' : __import__('os').environ['AUTHENTIK_CLIENT_ID'],
          'OAUTH2_CLIENT_SECRET' : __import__('os').environ['AUTHENTIK_CLIENT_SECRET'],
          'OAUTH2_TOKEN_URL' : 'https://sso.toino.pt/application/o/token/',
          'OAUTH2_AUTHORIZATION_URL' : 'https://sso.toino.pt/application/o/authorize/',
          'OAUTH2_API_BASE_URL' : 'https://sso.toino.pt/',
          'OAUTH2_USERINFO_ENDPOINT' : 'https://sso.toino.pt/application/o/userinfo/',
          'OAUTH2_SERVER_METADATA_URL' : 'https://sso.toino.pt/application/o/pgadmin/.well-known/openid-configuration',
          'OAUTH2_SCOPE' : 'openid email profile',
          'OAUTH2_BUTTON_COLOR' : '#FD4B2D',
          'OAUTH2_ICON' : 'fa fa-lock',
        }]
    expose:
      - "80:80"
    volumes:
      - ./data/pgadmin:/var/lib/pgadmin
    depends_on:
      - postgres
      - loki

  prometheus:
    <<: *default-service
    image: prom/prometheus:latest
    restart: unless-stopped
    expose:
      - "9090:9090"
    volumes:
      - ./data/prometheus:/prometheus
    configs:
      - source: prometheus
        target: /etc/prometheus/prometheus.yml
  
  loki:
    <<: *default-service
    image: grafana/loki:latest
    restart: unless-stopped
    expose:
      - "3100:3100"
    volumes:
      - ./data/loki:/loki
    configs:
      - source: loki
        target: ./config.yaml
    networks:
      default:
      vpcbr:
        ipv4_address: 10.5.0.2
    depends_on: []

  promtail:
    <<: *default-service
    image: grafana/promtail:latest
    command: -config.file=config.yaml
    restart: unless-stopped
    volumes:
      - ./logs:/logs:ro
    configs:
      - source: promtail
        target: ./config.yaml
  
  grafana:
    <<: *default-service
    image: grafana/grafana:latest
    restart: unless-stopped
    expose:
      - "3000:3000"
    environment:
      GF_SERVER_ROOT_URL: "https://grafana.toino.pt/"
      GF_AUTH_GENERIC_OAUTH_ENABLED: "true"
      GF_AUTH_GENERIC_OAUTH_NAME: "Authentik"
      GF_AUTH_GENERIC_OAUTH_SCOPES: "openid profile email"
      GF_AUTH_GENERIC_OAUTH_AUTH_URL: "https://sso.toino.pt/application/o/authorize/"
      GF_AUTH_GENERIC_OAUTH_TOKEN_URL: "https://sso.toino.pt/application/o/token/"
      GF_AUTH_GENERIC_OAUTH_API_URL: "https://sso.toino.pt/application/o/userinfo/"
      GF_AUTH_SIGNOUT_REDIRECT_URL: "https://sso.toino.pt/application/o/grafana/end-session/"
      GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH: "contains(groups[*], 'Superusers') && ('Admin' || 'Editor') || 'Viewer'"
      GF_AUTH_OAUTH_AUTO_LOGIN: "true"
    env_file:
      - ./secrets/grafana.env
    volumes:
      - ./data/grafana:/var/lib/grafana
  
  cadvisor:
    <<: *default-service
    image: gcr.io/cadvisor/cadvisor:latest
    restart: unless-stopped
    expose:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk:/dev/disk:ro
  
  node-exporter:
    <<: *default-service
    image: prom/node-exporter:latest
    restart: unless-stopped
    pid: host
    command:
      - --path.rootfs=/host
    expose:
      - "9100:9100"
    volumes:
      - /:/host:ro,rslave

  # Other services

  postgres:
    <<: *default-service
    image: postgres:15-alpine
    restart: unless-stopped
    env_file:
      - ./secrets/postgres.env
    environment:
      - POSTGRES_MULTIPLE_DATABASES=atrellado,authentik
    expose:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    configs:
      - source: postgres
        target: /docker-entrypoint-initdb.d/init-postgres.sh

  redis:
    <<: *default-service
    image: redis:alpine
    restart: unless-stopped
    expose:
      - "6379:6379"
    volumes:
      - ./data/redis:/data

  smtp:
    <<: *default-service
    image: namshi/smtp:latest
    restart: unless-stopped
    expose:
      - "25:25"

  solr:
    <<: *default-service
    image: localhost:5000/solr:latest
    restart: unless-stopped
    expose:
      - "8983:8983"
  
  mongo:
    <<: *default-service
    image: mongo:7
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: ementas
    expose:
      - "27017:27017"
    volumes:
      - ./data/mongo:/data/db
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'mongo:27017'}]}) }" | mongosh --port 27017 --quiet
      interval: 10s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30

volumes:
  website:
  latex-previewer:
  schema:
  xaufome:
  commits:
  sgi:

configs:
  loki:
    file: ./loki.yaml
  nginx:
    file: ./nginx.conf
  postgres:
    file: ./init-postgres.sh
  prometheus:
    file: ./prometheus.yml
  promtail:
    file: ./promtail.yaml
  registry:
    file: ./registry.yaml
  webhook:
    file: ./hooks.yaml
